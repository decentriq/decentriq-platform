"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class DatasetSinkWorkerConfiguration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTDEPENDENCY_FIELD_NUMBER: builtins.int
    ENCRYPTIONKEYDEPENDENCY_FIELD_NUMBER: builtins.int
    DATASETNAME_FIELD_NUMBER: builtins.int
    DATASETSCOPEID_FIELD_NUMBER: builtins.int
    DATASETDESCRIPTION_FIELD_NUMBER: builtins.int
    DATASETIMPORTID_FIELD_NUMBER: builtins.int
    inputDependency: builtins.str
    encryptionKeyDependency: builtins.str
    datasetName: builtins.str
    datasetScopeId: builtins.str
    datasetDescription: builtins.str
    datasetImportId: builtins.str
    def __init__(
        self,
        *,
        inputDependency: builtins.str = ...,
        encryptionKeyDependency: builtins.str = ...,
        datasetName: builtins.str = ...,
        datasetScopeId: builtins.str = ...,
        datasetDescription: builtins.str | None = ...,
        datasetImportId: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_datasetDescription", b"_datasetDescription", "_datasetImportId", b"_datasetImportId", "datasetDescription", b"datasetDescription", "datasetImportId", b"datasetImportId"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_datasetDescription", b"_datasetDescription", "_datasetImportId", b"_datasetImportId", "datasetDescription", b"datasetDescription", "datasetImportId", b"datasetImportId", "datasetName", b"datasetName", "datasetScopeId", b"datasetScopeId", "encryptionKeyDependency", b"encryptionKeyDependency", "inputDependency", b"inputDependency"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_datasetDescription", b"_datasetDescription"]) -> typing_extensions.Literal["datasetDescription"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_datasetImportId", b"_datasetImportId"]) -> typing_extensions.Literal["datasetImportId"] | None: ...

global___DatasetSinkWorkerConfiguration = DatasetSinkWorkerConfiguration
