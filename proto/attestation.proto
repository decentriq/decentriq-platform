syntax = "proto3";

package attestation;

message Fatquote {
    oneof fatquote {
        FatquoteEpid epid = 1;
        FatquoteDcap dcap = 2;
        FatquoteNitro nitro = 3;
        FatquoteSnp snp = 4;
        FatquoteDcapMrsigner dcapMrsigner = 5;
    }
};

message FatquoteEpid {
    bytes iasResponseBody = 1;
    bytes iasCertificate = 2;
    bytes iasSignature = 3;
    bytes iasRootCaDer = 4;
}

message FatquoteDcap {
    bytes dcapQuote = 1;
    bytes tcbInfo = 2;
    bytes qeIdentity = 3;
    bytes tcbSignCert = 4;
    bytes qeSignCert = 5;
    bytes dcapRootCaDer = 6;
}

message FatquoteDcapMrsigner {
    bytes dcapQuote = 1;
    bytes tcbInfo = 2;
    bytes qeIdentity = 3;
    bytes tcbSignCert = 4;
    bytes qeSignCert = 5;
    bytes dcapRootCaDer = 6;
    SigstoreEvidence sigstoreEvidence = 7;
}

message SigstoreFile {
    string name = 1;
    bytes contents = 2;
}

message SigstoreEvidence {
    oneof sigstore_evidence {
        SigstoreEvidenceV1 v1 = 1;
    }
}

message SigstoreEvidenceV1 {
    // This list contains the root.json chain, targets.json and trusted_root.json
    // (1.root.json, 2.root.json, .., X.root.json, Y.targets.json, trusted_root.json.)
    repeated SigstoreFile files = 1;
    // Contains the inclusion proof and the leaf cosign certificate in the transparency log and ultimately the final SHA of the sgxs.
    bytes rekorLogEntryJson = 2;
}

message FatquoteNitro {
    bytes cose = 1;
    bytes nitroRootCaDer = 2;
}

message FatquoteSnp {
    bytes reportBin = 1;
    bytes amdArkDer = 2;
    bytes amdSevDer = 3;
    bytes vcekCrtDer = 4;
    bytes reportData = 5;
    bytes roughtimePubKey = 6;
    bytes roughtimeNonce = 7;
    bytes signedTimestamp = 8;
    bytes decentriqDer = 9;
    bytes chipDer = 10;
}

message AttestationSpecification {
    oneof attestation_specification {
        AttestationSpecificationIntelEpid intelEpid = 1;
        AttestationSpecificationIntelDcap intelDcap = 2;
        AttestationSpecificationAwsNitro awsNitro = 3;
        AttestationSpecificationAmdSnp amdSnp = 4;
        AttestationSpecificationIntelDcapMrsigner intelDcapMrsigner = 5;
    }
}

message AttestationSpecificationIntelEpid {
    bytes mrenclave = 1;
    bytes iasRootCaDer = 2;
    bool acceptDebug = 3;
    bool acceptGroupOutOfDate = 4;
    bool acceptConfigurationNeeded = 5;
}

message AttestationSpecificationIntelDcap {
    bytes mrenclave = 1;
    bytes dcapRootCaDer = 2;
    bool acceptDebug = 3;
    bool acceptOutOfDate = 4;
    bool acceptConfigurationNeeded = 5;
    bool acceptRevoked = 6;
}

message AttestationSpecificationAwsNitro {
    bytes nitroRootCaDer = 1;
    bytes pcr0 = 2;
    bytes pcr1 = 3;
    bytes pcr2 = 4;
    bytes pcr8 = 5;
}

message AttestationSpecificationAmdSnp {
    bytes amdArkDer = 1;
    bytes measurement = 2;
    bytes roughtimePubKey = 3;
    repeated bytes authorizedChipIds = 4;
    bytes decentriqDer = 5;
}

message AttestationSpecificationIntelDcapMrsigner {
    bytes mrsigner = 1;
    bytes dcapRootCaDer = 2;
    bool acceptDebug = 3;
    bool acceptOutOfDate = 4;
    bool acceptConfigurationNeeded = 5;
    bool acceptRevoked = 6;
    uint32 isvprodid = 7;
    bytes sigstoreRootOlpcJson = 8;
}
