syntax = "proto3";
package compute_container;

message ContainerWorkerConfiguration {
    oneof configuration {
        StaticImage static = 1;
    }
}

message StaticImage {
    repeated string command = 1;
    repeated MountPoint mountPoints = 2;
    string outputPath = 3;
    bool includeContainerLogsOnError = 4;
    bool includeContainerLogsOnSuccess = 5;
    // When executing a computation, the available VM memory is split into two:
    // 1. One part given to the in-memory chunk cache (this is backing the /input and /output filesystems, analogous to
    //     the kernel's pagecache).
    // 2. The second part is given to the container itself.
    // The sizes are controlled by minimumContainerMemorySize and extraChunkCacheSizeToAvailableMemoryRatio.
    // First minimumContainerMemorySize and a hardcoded minimum chunk cache size is subtracted from the available memory,
    // then the rest is split according to extraChunkCacheSizeToAvailableMemoryRatio.
    // For example, given a 64G VM with 62G available memory for compute:
    // * minimumContainerMemorySize by default is 2G
    // * minimum chunk cache size is 256M
    // * extraChunkCacheSizeToAvailableMemoryRatio by default is 0.0625
    // * therefore 0.0625 * (62G - 2G - 256M) =~ 3730M further memory is given to the chunk cache
    // * so we end up with chunk_cache_size ~= 4G, container_memory ~=58G
    // Generally speaking the split should be determined by the computation itself:
    // * Example SQLite: SQLite is memory-bound generally speaking and does a lot of back-and-forth between its
    //     in-memory cache and the db file. This means that high extraChunkCacheSizeToAvailableMemoryRatio(1.0) and low
    //     minimumContainerMemorySize should be used because this will speed up the file backing, and SQLite doesn't use
    //     the extra container memory efficiently.
    // * Example CHUV pipeline: this computation accesses sparse static input genome data in a fairly random manner,
    //     meaning that the best course of action is to read all data into memory first instead of relying on the chunk
    //     cache backed filesystem. This means low extraChunkCacheSizeToAvailableMemoryRatio(1.0) should be used.
    //     A setting of 1.0 means that all available extra memory (aside from the minimum chunk cache size) will be
    //     given to the container.
    // * Example default settings: by default most but not all of the memory is given to the container, assuming that
    //     most applications tend to read the input files into memory as a first step instead of streaming through.
    optional uint64 minimumContainerMemorySize = 6;               // default 2G
    optional float extraChunkCacheSizeToAvailableMemoryRatio = 7; // default 0.0625
}

// Dependencies are mounted under the `/input` directory
// For example for a mount point entry { path: "/data", dependency: "dep" }
// the worker will mount the dependency `dep` at path `/input/data`
message MountPoint {
    string path = 1;
    string dependency = 2;
}
