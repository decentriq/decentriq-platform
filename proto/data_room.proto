syntax = "proto3";
package data_room;

import "attestation.proto";


/// To create a dataroom the user need to specify the `GovernanceProtocol`
/// and the list of `ConfigurationModification`.
/// The `GovernanceProtocol` defines how new modifications can be applied to an existing data room.
/// The list of `ConfigurationModification`s (abbreviated by "Modification" in the diagram below)
/// defined the structure of the data room itself (the compute nodes,
/// the permissions, etc...), this list makes up the first `ConfigurationCommit` for the dataroom.
///
/// ```diagram
///  ┌──────────────────────┐                               
///  │CreateDataRoomRequest │           ┌──────────────────┐
///  │ ┌──────────────────┐ │           │ DataRoomContext  │
///  │ │GovernanceProtocol│ │           │ ┌──────────────┐ │
///  │ └──────────────────┘ │           │ │  Leaf nodes  │ │
///  │ ┌─────────────┐      ├──────────▶│ │ manifest map │ │
///  │ │ ┌───────────┴─┐    │           │ └──────────────┘ │
///  │ └─┤┌────────────┴──┐ │           │ ┌──────────────┐ │
///  │   └┤ Modification  │ │           │ │CommitsHistory│ │
///  │    └───────────────┘ │           │ └──────────────┘ │
///  └──────────────────────┘           └──────────────────┘
/// ```
///
/// A dataroom has a corresponding `DataRoomContext` which includes a map of the
/// currently published datasets (and corresponding encryption key) and the commits history
/// which is a list of the `ConfigurationCommit` that make up the data room
///  
/// ```diagram
///  ┌──────────────────────────────┐                                        
///  │        CommitsHistory        │                                        
///  │┌────────────────────┐        │        ┌────┬─────────────────────────┐
///  ││ ┌──────────────────┴─┐      │     ┌──│ Id │ConfigurationCommit #1   │
///  ││ │  ┌─────────────────┴──┐   │     │  └────┴─────────────────────────┘
///  ││ │  │ ┌──────────────────┴─┐ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │ConfigurationCommit │ │     ├──│ Id │ConfigurationCommit #2   │
///  ││ │  │ │┌──────────────────┐│ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││    DataRoomId    ││ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │└──────────────────┘│ │     ├──│ Id │ConfigurationCommit #3   │
///  ││ │  │ │┌──────────────────┐│ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││   DataRoomPin    ││ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │└──────────────────┘│ │     ├──│ Id │ConfigurationCommit #4   │
///  ││ │  │ │┌─────────────┐     │ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││ ┌───────────┴─┐   │ │     │                                  
///  │└─┤  │ │└─┤┌────────────┴──┐│ │     │                                  
///  │  └──┤ │  └┤ Modification  ││ │     │    ┌──────────────────────────┐  
///  │     └─┤   └───────────────┘│ │     └───▶│       DataRoomPin        │  
///  │       └────────────────────┘ │          └──────────────────────────┘  
///  └──────────────────────────────┘
/// ```
///
/// Each `ConfigurationCommit` is identified by the data room which it refers to and the
/// pin of the data room itself. A commit can only be merged if the `pin` corresponds to the
/// current configuration history state of the data room
///
/// ```diagram
///  ┌───────────────────────────────┐           ┌────────────────┐
///  │MergeConfigurationCommitRequest│           │ CommitsHistory │
///  │ ┌───────────────────────────┐ │           └────────────────┘
///  │ │  ConfigurationCommit #5   │ │              ┌────┐         
///  │ └───────────────────────────┘ │              │ ┌──┴─┐       
///  │ ┌─────────────────────┐       ├──────────▶   └─┤ ┌──┴─┐     
///  │ │  ┌──────────────────┴──┐    │                └─┤ ┌──┴─┐   
///  │ └──┤  ┌──────────────────┴──┐ │                  └─┤ ┌──┴─┐ 
///  │    └──┤   MergeSignature    │ │                    └─┤ 5  │ 
///  │       └─────────────────────┘ │                      └────┘ 
///  └───────────────────────────────┘                             
/// ```
///
/// When a user collects the approval signatures required to merge a commit, this can
/// be added to the commits history.
/// The list of approvers depends both on the commit and the `GovernanceProtocol` that
/// the data room is configured with:
/// - StaticDataRoomPolicy: the data room is static, there isn't an approver that
///    can authorize the merge
/// - AffectedDataOwnersApprovePolicy: the approvers for a commit are the user which have
///     a CrudPermisison on the leaf node that the new nodes may use
///
/// ```diagram
///                                           ┌────────────────────┐                         
///                                           │   UserPermission   │                         
///  ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐      │ ┌───────────────┐  │                         
///            New Commit Node                │ │user1@email.com│──┼──┐                      
///  │          ┌───┬───────┐          │      │ └───────────────┘  │  │                      
///           ┌▶│0x4│Python │◀─┐              │ ┌──────────────┐   │  │                      
///  │        │ └───┴───────┘  │       │      │ │ ┌────────────┴─┐ │  │                      
///   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ─ ─       │ └─┤CrudPermission│ │  │     ┌───────────────┐
///  ┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐      │   │   id: 0x1    │ │  └────▶│   Required    │
///     ┌───┬─┴─────┐          │              │   └──────────────┘ │        │   Approvers   │
///  │  │0x3│  Sql  │          │       │      └────────────────────┘        ├───────────────┤
///     └───┴───────┘          │              ┌────────────────────┐  ┌────▶│user1@email.com│
///  │        ▲                │       │      │   UserPermission   │  │     │               │
///     ┌───┬─┴─────┐   ┌───┬──┴────┐         │ ┌───────────────┐  │  │     │user2@email.com│
///  │  │0x1│Leaf 1 │   │0x2│Leaf 2 │  │      │ │user2@email.com│──┼──┘     └───────────────┘
///     └───┴───────┘   └───┴───────┘         │ └───────────────┘  │                         
///  │                                 │      │ ┌──────────────┐   │                         
///      Old data room configuration          │ │ ┌────────────┴─┐ │                         
///  └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘      │ └─┤CrudPermission│ │                         
///                                           │   │   id: 0x2    │ │                         
///                                           │   └──────────────┘ │                         
///                                           └────────────────────┘
/// ```
///
/// In the example above `user3@email.com` has created a new commit which adds node `0x4` to the
/// data room. By walking the computation graph the node depends on node `0x2` directly and node
/// `0x1` indirectly. To authorize the merge both owners of these leaf nodes must provide an approval
/// signature. The ownership of the nodes is determined by checking who has `CrudPermission` on the
/// leaf nodes.
///  
/// Configuration commits don't have to be merged into a data room configuration
/// history, but can also be used to execute computations on top of data the user
/// already has access to. This is determined by checking if a user has ExecuteComputePermission
/// on the node which the new nodes depend on
///
/// ```diagram
///  ┌ ─ ─ ─ ─ ─ ─ ─ ─ ┐                          
///    New Commit Node                            
///  │  ┌───┬───────┐  │                          
///     │0x3│Python │       ┌────────────────────┐
///  │  └───┴───────┘  │    │   UserPermission   │
///   ─ ─ ─ ─ ▲ ─ ─ ─ ─     │ ┌───────────────┐  │
///  ┌ ─ ─ ─ ─│─ ─ ─ ─ ┐    │ │user2@email.com│  │
///     ┌───┬─┴─────┐       │ └───────────────┘  │
///  │  │0x2│  Sql  │  │    │ ┌──────────────┐   │
///     └───┴───────┘       │ │ ┌────────────┴─┐ │
///  │        ▲        │    │ └─┤ExecuteCompute│ │
///     ┌───┬─┴─────┐       │   │   id: 0x2    │ │
///  │  │0x1│Leaf 1 │  │    │   └──────────────┘ │
///     └───┴───────┘       └────────────────────┘
///  │  Old data room  │                          
///     configuration                             
///  └ ─ ─ ─ ─ ─ ─ ─ ─ ┘
/// ```
///
/// In the example above `user2@email.com` has created a new commit which adds node `0x3` to the
/// data room. The node has a dependency on `0x2`, for which the user has `ExecuteComputePermission`
/// which means that the user can execute the node `0x3`

message DataRoom {
    string id = 1;
    reserved 2 to 5;
    string name = 6;
    string description = 7;
    string ownerEmail = 8;
    GovernanceProtocol governanceProtocol = 9;
}

message GovernanceProtocol {
    oneof policy {
        StaticDataRoomPolicy staticDataRoomPolicy = 1; 
        AffectedDataOwnersApprovePolicy affectedDataOwnersApprovePolicy = 2; 
    }
}

message StaticDataRoomPolicy {}
message AffectedDataOwnersApprovePolicy {}

message DataRoomConfiguration {
    map<string, ConfigurationElement> elements = 1;
}

message ConfigurationElement {
   oneof element {
       ComputeNode computeNode = 1;
       attestation.AttestationSpecification attestationSpecification = 2;
       UserPermission userPermission = 3;
       AuthenticationMethod authenticationMethod = 4;
   }
}

message ConfigurationModification {
   oneof modification {
      AddModification add = 1;
      ChangeModification change = 2;
      DeleteModification delete = 3;
   }
}

message AddModification {
   string id = 1;
   ConfigurationElement element = 2;
}

message ChangeModification {
   string id = 1;
   ConfigurationElement element = 2;
}

message DeleteModification {
   string id = 1;
}

message ConfigurationCommit {
   bytes dataRoomId = 1;
   bytes dataRoomHistoryPin = 2;
   repeated ConfigurationModification modifications = 3;
}

message ComputeNode {
    string nodeName = 1;
    oneof node {
        ComputeNodeLeaf leaf = 2;
        ComputeNodeBranch branch = 3;
    }
}

message ComputeNodeLeaf {
    bool isRequired = 1;
}

enum ComputeNodeFormat {
    RAW = 0;
    ZIP = 1;
}

message ComputeNodeProtocol {
    uint32 version = 1;
}

message ComputeNodeBranch {
    bytes config = 1;
    repeated string dependencies = 2;
    reserved 3;
    ComputeNodeFormat outputFormat = 4;
    ComputeNodeProtocol protocol = 5;
    string attestationSpecificationId = 6;
}

message UserPermission {
    string email = 1;
    reserved 2;
    repeated Permission permissions = 3;
    string authenticationMethodId = 4;
}

message AuthenticationMethod {
    optional TrustedPki trustedPki = 1;
}

message TrustedPki {
    bytes rootCertificatePem = 1;
}

message Permission {
    oneof permission {
        ExecuteComputePermission executeComputePermission = 1;
        LeafCrudPermission leafCrudPermission = 2;
        RetrieveDataRoomPermission retrieveDataRoomPermission = 3;
        RetrieveAuditLogPermission retrieveAuditLogPermission = 4;
        RetrieveDataRoomStatusPermission retrieveDataRoomStatusPermission = 5;
        UpdateDataRoomStatusPermission updateDataRoomStatusPermission = 6;
        RetrievePublishedDatasetsPermission retrievePublishedDatasetsPermission = 7;
        DryRunPermission dryRunPermission = 8;
        GenerateMergeSignaturePermission generateMergeSignaturePermission = 9;
        ExecuteDevelopmentComputePermission executeDevelopmentComputePermission = 10;
        MergeConfigurationCommitPermission mergeConfigurationCommitPermission = 11;
    }
}

message ExecuteComputePermission {
    string computeNodeName = 1;
}

message LeafCrudPermission {
    string leafNodeName = 1;
}

message RetrieveDataRoomPermission {}

message RetrieveAuditLogPermission {}

message RetrieveDataRoomStatusPermission {}

message UpdateDataRoomStatusPermission {}

message RetrievePublishedDatasetsPermission {}

message DryRunPermission {}

message GenerateMergeSignaturePermission {}

message ExecuteDevelopmentComputePermission {}

message MergeConfigurationCommitPermission {}
