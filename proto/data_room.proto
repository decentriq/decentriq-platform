syntax = "proto3";
package data_room;

import "attestation.proto";

/// To create a dataroom the user need to specify the `GovernanceProtocol`
/// and the list of `ConfigurationModification`.
/// The `GovernanceProtocol` defines how new modifications can be applied to an
/// existing data room. The list of `ConfigurationModification`s (abbreviated by
/// "Modification" in the diagram below) defined the structure of the data room
/// itself (the compute nodes, the permissions, etc...), this list makes up the
/// first `ConfigurationCommit` for the dataroom.
///
/// ```diagram
///  ┌──────────────────────┐
///  │CreateDataRoomRequest │           ┌──────────────────┐
///  │ ┌──────────────────┐ │           │ DataRoomContext  │
///  │ │GovernanceProtocol│ │           │ ┌──────────────┐ │
///  │ └──────────────────┘ │           │ │  Leaf nodes  │ │
///  │ ┌─────────────┐      ├──────────▶│ │ manifest map │ │
///  │ │ ┌───────────┴─┐    │           │ └──────────────┘ │
///  │ └─┤┌────────────┴──┐ │           │ ┌──────────────┐ │
///  │   └┤ Modification  │ │           │ │CommitsHistory│ │
///  │    └───────────────┘ │           │ └──────────────┘ │
///  └──────────────────────┘           └──────────────────┘
/// ```
///
/// A dataroom has a corresponding `DataRoomContext` which includes a map of the
/// currently published datasets (and corresponding encryption key) and the
/// commits history which is a list of the `ConfigurationCommit` that make up
/// the data room
///
/// ```diagram
///  ┌──────────────────────────────┐
///  │        CommitsHistory        │
///  │┌────────────────────┐        │        ┌────┬─────────────────────────┐
///  ││ ┌──────────────────┴─┐      │     ┌──│ Id │ConfigurationCommit #1   │
///  ││ │  ┌─────────────────┴──┐   │     │  └────┴─────────────────────────┘
///  ││ │  │ ┌──────────────────┴─┐ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │ConfigurationCommit │ │     ├──│ Id │ConfigurationCommit #2   │
///  ││ │  │ │┌──────────────────┐│ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││    DataRoomId    ││ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │└──────────────────┘│ │     ├──│ Id │ConfigurationCommit #3   │
///  ││ │  │ │┌──────────────────┐│ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││   DataRoomPin    ││ │     │  ┌────┬─────────────────────────┐
///  ││ │  │ │└──────────────────┘│ │     ├──│ Id │ConfigurationCommit #4   │
///  ││ │  │ │┌─────────────┐     │ │     │  └────┴─────────────────────────┘
///  ││ │  │ ││ ┌───────────┴─┐   │ │     │
///  │└─┤  │ │└─┤┌────────────┴──┐│ │     │
///  │  └──┤ │  └┤ Modification  ││ │     │    ┌──────────────────────────┐
///  │     └─┤   └───────────────┘│ │     └───▶│       DataRoomPin        │
///  │       └────────────────────┘ │          └──────────────────────────┘
///  └──────────────────────────────┘
/// ```
///
/// Each `ConfigurationCommit` is identified by the data room which it refers to
/// and the pin of the data room itself. A commit can only be merged if the
/// `pin` corresponds to the current configuration history state of the data
/// room
///
/// ```diagram
///  ┌───────────────────────────────┐           ┌────────────────┐
///  │MergeConfigurationCommitRequest│           │ CommitsHistory │
///  │ ┌───────────────────────────┐ │           └────────────────┘
///  │ │  ConfigurationCommit #5   │ │              ┌────┐
///  │ └───────────────────────────┘ │              │ ┌──┴─┐
///  │ ┌─────────────────────┐       ├──────────▶   └─┤ ┌──┴─┐
///  │ │  ┌──────────────────┴──┐    │                └─┤ ┌──┴─┐
///  │ └──┤  ┌──────────────────┴──┐ │                  └─┤ ┌──┴─┐
///  │    └──┤   MergeSignature    │ │                    └─┤ 5  │
///  │       └─────────────────────┘ │                      └────┘
///  └───────────────────────────────┘
/// ```
///
/// When a user collects the approval signatures required to merge a commit,
/// this can be added to the commits history. The list of approvers depends both
/// on the commit and the `GovernanceProtocol` that the data room is configured
/// with:
/// - StaticDataRoomPolicy: the data room is static, there isn't an approver
/// that
///    can authorize the merge
/// - AffectedDataOwnersApprovePolicy: the approvers for a commit are the user
/// which have
///     a CrudPermisison on the leaf node that the new nodes may use
///
/// ```diagram
///                                           ┌────────────────────┐
///                                           │   UserPermission   │
///  ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐      │ ┌───────────────┐  │
///            New Commit Node                │ │user1@email.com│──┼──┐
///  │          ┌───┬───────┐          │      │ └───────────────┘  │  │
///           ┌▶│0x4│Python │◀─┐              │ ┌──────────────┐   │  │
///  │        │ └───┴───────┘  │       │      │ │ ┌────────────┴─┐ │  │
///   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ─ ─       │ └─┤CrudPermission│ │  │
///   ┌───────────────┐
///  ┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐      │   │   id: 0x1    │ │  └────▶│
///  Required    │
///     ┌───┬─┴─────┐          │              │   └──────────────┘ │        │
///     Approvers   │
///  │  │0x3│  Sql  │          │       │      └────────────────────┘
///  ├───────────────┤
///     └───┴───────┘          │              ┌────────────────────┐
///     ┌────▶│user1@email.com│
///  │        ▲                │       │      │   UserPermission   │  │     │ │
///     ┌───┬─┴─────┐   ┌───┬──┴────┐         │ ┌───────────────┐  │  │
///     │user2@email.com│
///  │  │0x1│Leaf 1 │   │0x2│Leaf 2 │  │      │ │user2@email.com│──┼──┘
///  └───────────────┘
///     └───┴───────┘   └───┴───────┘         │ └───────────────┘  │
///  │                                 │      │ ┌──────────────┐   │
///      Old data room configuration          │ │ ┌────────────┴─┐ │
///  └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘      │ └─┤CrudPermission│ │
///                                           │   │   id: 0x2    │ │
///                                           │   └──────────────┘ │
///                                           └────────────────────┘
/// ```
///
/// In the example above `user3@email.com` has created a new commit which adds
/// node `0x4` to the data room. By walking the computation graph the node
/// depends on node `0x2` directly and node `0x1` indirectly. To authorize the
/// merge both owners of these leaf nodes must provide an approval signature.
/// The ownership of the nodes is determined by checking who has
/// `CrudPermission` on the leaf nodes.
///
/// Configuration commits don't have to be merged into a data room configuration
/// history, but can also be used to execute computations on top of data the
/// user already has access to. This is determined by checking if a user has
/// ExecuteComputePermission on the node which the new nodes depend on
///
/// ```diagram
///  ┌ ─ ─ ─ ─ ─ ─ ─ ─ ┐
///    New Commit Node
///  │  ┌───┬───────┐  │
///     │0x3│Python │       ┌────────────────────┐
///  │  └───┴───────┘  │    │   UserPermission   │
///   ─ ─ ─ ─ ▲ ─ ─ ─ ─     │ ┌───────────────┐  │
///  ┌ ─ ─ ─ ─│─ ─ ─ ─ ┐    │ │user2@email.com│  │
///     ┌───┬─┴─────┐       │ └───────────────┘  │
///  │  │0x2│  Sql  │  │    │ ┌──────────────┐   │
///     └───┴───────┘       │ │ ┌────────────┴─┐ │
///  │        ▲        │    │ └─┤ExecuteCompute│ │
///     ┌───┬─┴─────┐       │   │   id: 0x2    │ │
///  │  │0x1│Leaf 1 │  │    │   └──────────────┘ │
///     └───┴───────┘       └────────────────────┘
///  │  Old data room  │
///     configuration
///  └ ─ ─ ─ ─ ─ ─ ─ ─ ┘
/// ```
///
/// In the example above `user2@email.com` has created a new commit which adds
/// node `0x3` to the data room. The node has a dependency on `0x2`, for which
/// the user has `ExecuteComputePermission` which means that the user can
/// execute the node `0x3`

message DataRoom {
  string id = 1;
  string name = 2;
  string description = 3;
  GovernanceProtocol governanceProtocol = 4;
  DataRoomConfiguration initialConfiguration = 5;
}

message GovernanceProtocol {
  oneof policy {
    StaticDataRoomPolicy staticDataRoomPolicy = 1;
    AffectedDataOwnersApprovePolicy affectedDataOwnersApprovePolicy = 2;
  }
}

message StaticDataRoomPolicy {}
message AffectedDataOwnersApprovePolicy {}

message DataRoomConfiguration { repeated ConfigurationElement elements = 1; }

message ConfigurationElement {
  string id = 1;
  oneof element {
    ComputeNode computeNode = 2;
    attestation.AttestationSpecification attestationSpecification = 3;
    UserPermission userPermission = 4;
    AuthenticationMethod authenticationMethod = 5;
  }
}

message ConfigurationModification {
  oneof modification {
    AddModification add = 1;
    ChangeModification change = 2;
    DeleteModification delete = 3;
  }
}

message AddModification { ConfigurationElement element = 1; }

message ChangeModification { ConfigurationElement element = 1; }

message DeleteModification { string id = 1; }

message ConfigurationCommit {
  string id = 1;
  string name = 2;
  bytes dataRoomId = 3;
  bytes dataRoomHistoryPin = 4;
  repeated ConfigurationModification modifications = 5;
}

message WindowRateLimitingConfig {
  uint32 timeWindowSeconds = 1;
  uint32 numMaxExecutions = 2;
}

message RateLimitingConfig {
  oneof method {
    WindowRateLimitingConfig window = 1;
  }
}

message ComputeNode {
  string nodeName = 1;
  oneof node {
    ComputeNodeLeaf leaf = 2;
    ComputeNodeParameter parameter = 4;
    ComputeNodeBranch branch = 3;
  }
  /// Control how often this node can be interacted with
  /// in the defined time interval.
  /// Imporatant: this is currently checked in the metering extension
  /// as implementing it in the driver would not give us additional
  /// security due to replay/reset attacks.
  /// In this implementation, it only checks direct interactions wit a
  /// node, it won't check indirect executions (if the node was a dependency
  /// of another node). This issue is even bigger in DCRs with interactivity
  /// where someone could simply add a new node on top that doesn't have
  /// the rate limit applied.
  optional RateLimitingConfig rateLimiting = 5;
}

message ComputeNodeLeaf {
  bool isRequired = 1;
}

message ComputeNodeParameter { bool isRequired = 1; }

enum ComputeNodeFormat {
  RAW = 0;
  ZIP = 1;
}

message ComputeNodeProtocol { uint32 version = 1; }

message ComputeNodeBranch {
  bytes config = 1;
  repeated string dependencies = 2;
  ComputeNodeFormat outputFormat = 3;
  ComputeNodeProtocol protocol = 4;
  string attestationSpecificationId = 5;
}

message UserPermission {
  string email = 1;
  repeated Permission permissions = 2;
  string authenticationMethodId = 3;
}

message AuthenticationMethod {
  PkiPolicy personalPki = 1;
  PkiPolicy dqPki = 2;
  DcrSecretPolicy dcrSecret = 3;
  // the policies below could be implemented later on
  // EmailVerificationPolicy emailVerificationPolicy = 3;
  // OpenIdConnectPolicy openIdConnectPolicy = 4;
  // DcrSecretPolicy
}

message PkiPolicy { bytes rootCertificatePem = 1; }

message DcrSecretPolicy { bytes dcrSecretId = 1; }

message Permission {
  oneof permission {
    ExecuteComputePermission executeComputePermission = 1;
    LeafCrudPermission leafCrudPermission = 2;
    RetrieveDataRoomPermission retrieveDataRoomPermission = 3;
    RetrieveAuditLogPermission retrieveAuditLogPermission = 4;
    RetrieveDataRoomStatusPermission retrieveDataRoomStatusPermission = 5;
    UpdateDataRoomStatusPermission updateDataRoomStatusPermission = 6;
    RetrievePublishedDatasetsPermission retrievePublishedDatasetsPermission = 7;
    DryRunPermission dryRunPermission = 8;
    GenerateMergeSignaturePermission generateMergeSignaturePermission = 9;
    ExecuteDevelopmentComputePermission executeDevelopmentComputePermission =
        10;
    MergeConfigurationCommitPermission mergeConfigurationCommitPermission = 11;
    RetrieveComputeResultPermission retrieveComputeResultPermission = 12;
    CasAuxiliaryStatePermission casAuxiliaryStatePermission = 13;
    ReadAuxiliaryStatePermission readAuxiliaryStatePermission = 14;
  }
}

message ExecuteComputePermission { string computeNodeId = 1; }

message LeafCrudPermission { string leafNodeId = 1; }

message RetrieveDataRoomPermission {}

message RetrieveAuditLogPermission {}

message RetrieveDataRoomStatusPermission {}

message UpdateDataRoomStatusPermission {}

message RetrievePublishedDatasetsPermission {}

message DryRunPermission {}

message GenerateMergeSignaturePermission {}

message ExecuteDevelopmentComputePermission {}

message MergeConfigurationCommitPermission {}

message RetrieveComputeResultPermission { string computeNodeId = 1; }

message CasAuxiliaryStatePermission {}

message ReadAuxiliaryStatePermission {}
