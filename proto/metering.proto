syntax = "proto2";

package metering;

import "attestation.proto";

message MeteringRequest {
    oneof request {
        CreateDcrRequest createDcr = 1;
        CreateDcrCommitRequest createDcrCommit = 2;
        StopDcrRequest stopDcr = 3;
        PublishDatasetRequest publishDataset = 4;
        UnpublishDatasetRequest unpublishDataset = 5;
        WorkerMetadataRequest workerMetadata = 6;
        SubmitWorkerExecutionTimeRequest submitWorkerExecutionTime = 7;
        DcrInteractionRequest dcrInteraction = 8;
    }
}

message MeteringSuccessResponse {
    oneof response {
        CreateDcrResponse createDcr = 1;
        CreateDcrCommitResponse createDcrCommit = 2;
        StopDcrResponse stopDcr = 3;
        PublishDatasetResponse publishDataset = 4;
        UnpublishDatasetResponse unpublishDataset = 5;
        WorkerMetadataResponse workerMetadata = 6;
        SubmitWorkerExecutionTimeResponse submitWorkerExecutionTime = 7;
        DcrInteractionResponse dcrInteraction = 8;
    }
}

message MeteringResponse {
    oneof response {
        MeteringSuccessResponse success = 1;
        string failure = 2;
    }
}

enum CreateDcrPurpose {
    STANDARD = 0;
    VALIDATION = 1;
}

message DcrMetadata {
    /// Why this data room is being created (allows for purpose-based filtering of data rooms)
    optional CreateDcrPurpose purpose = 1;
    /// Whether to show the organization logo
    optional bool showOrganizationLogo = 2;
    /// Whether the DCR requires a password
    optional bool requirePassword = 3;
}

message CreateDcrRequest {
    /// The DCR hash to be used for the published data room
    required string idHex = 1;
    required string name = 2;
    /// The driver attestation hash
    required string driverAttestationHash = 3;
    repeated string participantEmails = 4;
    /// Optional metadata that will be persisted to the database
    optional bytes metadata = 5;
}

message DcrInteractionRequest {
    /// The hex-encoded hash of the data room
    required string dataRoomHash = 1;
    /// The driver attestation hash
    required string driverAttestationHash = 2;
    // Id of the scope to check
    required string scopeId = 3;
}

message PublishDatasetRequest {
    /// The UUID of the compute node to which this dataset is being published
    required string computeNodeId = 1;
    /// The hex-encoded manifest hash of the dataset
    required string manifestHash = 2;
    /// The hex-encoded hash of the data room
    required string dataRoomHash = 3;
    /// The driver attestation hash
    required string driverAttestationHash = 4;
}

message UnpublishDatasetRequest {
    /// The UUID of the compute node to which this dataset is being published
    required string computeNodeId = 1;
    /// The hex-encoded hash of the data room
    required string dataRoomHash = 2;
    /// The driver attestation hash
    required string driverAttestationHash = 3;
}

message StopDcrRequest {
    /// The hex-encoded data room hash
    required string dataRoomHash = 1;
    /// The driver attestation hash
    required string driverAttestationHash = 2;
}

message CreateDcrCommitRequest {
    required string id = 1;
}

message CreateDcrResponse {}

message DcrInteractionResponse {}

message CreateDcrCommitResponse {}

message StopDcrResponse {}

message PublishDatasetResponse {}

message UnpublishDatasetResponse {}

message WorkerMetadataRequest {
    /// Attestation spec of the worker for which to perform the metadata lookup
    required attestation.AttestationSpecification attestationSpec = 1;
    /// Id of the scope in the context of which a computation is performed
    required string scopeId = 2;
}

message WorkerMetadataResponse {
    optional uint64 maxExecutionSeconds = 1;
}

message SubmitWorkerExecutionTimeRequest {
    required uint32 executionTimeSeconds = 1;
    required attestation.AttestationSpecification attestationSpec = 2;
    /// Id of the scope in the context of which a computation is performed
    required string scopeId = 3;
}

message SubmitWorkerExecutionTimeResponse {}